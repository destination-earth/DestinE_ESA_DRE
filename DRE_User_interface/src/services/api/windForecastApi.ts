// Wind forecast specific API services

import axios from 'axios';
import { WindForecastApiResponse } from './forecastTypes';
import axiosInstance from './axiosConfig';
import * as mockWindApi from '../mockData/windForecastMockApi';

// Log API configuration on initialization
if (import.meta.env.DEV) {
  console.debug(`[API Config] Using REAL Wind Forecast API with mock visualization data`);
}

/**
 * Response type for file upload
 */
export interface FileUploadResponse {
  jobid: string;
  message: string;
  status: number;
}

export interface FileValidationResult {
  valid: boolean;
  message: string;
  file_path: string; // Path to the validated file on the server
  guid?: string; // Unique identifier generated by the server
  aux?: string; // Optional auxiliary information
  filename?: string; // Original filename
}

/**
 * Interface for standard wind forecast request parameters
 */
export interface WindForecastParams {
  latitude: number;
  longitude: number;
  elevation?: number; // Optional for wind forecasts
  startDate?: string;
  endDate?: string;
  hubHeight: number;
  powerCurveModel: string;
  capacity?: number;
  validatedPowerCurvePath?: string | null;
  guid?: string | null;
  aux?: string | null;
  // Add these fields to match WindJsonSubmitParams structure
  filename?: string;
  train_data?: string;
  hubheight?: number; // Lowercase version for API compatibility
}
export interface ValidateWindFilesParams {
  templateFile: File;
  powerCurveFile?: File | null; // Optional power curve file
  plan: "oneoff" | "annual"; // Plan type from TrainForecastForm prop
  powerCurveModel: string; // The selected model name (e.g., "upload_custom")
  type?: "train" | "standard"; // Form type to differentiate between train and standard forms
}

// Function to validate wind training files or power curve files
export const validateWindTrainingFiles = async ({
  templateFile,
  powerCurveFile,
  plan,
  powerCurveModel,
  type = "train", // Default to train if not specified
}: ValidateWindFilesParams): Promise<FileValidationResult> => {
  console.log(
    "[validateWindTrainingFiles] Received params:",
    {
      templateFileName: templateFile?.name,
      templateFileSize: templateFile?.size,
      powerCurveFileName: powerCurveFile?.name,
      powerCurveFileSize: powerCurveFile?.size,
      plan,
      powerCurveModel,
      type, // Log the form type
    },
  );

  const formData = new FormData();

  // Append template file (assuming it's always required for validation)
  if (templateFile) {
    formData.append("file", templateFile, templateFile.name);
    console.log(`[validateWindTrainingFiles] Appended template file: ${templateFile.name}`);
  } else {
    console.warn("[validateWindTrainingFiles] Template file is missing!");
  }

  // Append power curve file if it exists and the model is custom
  if (powerCurveModel === "upload_custom" && powerCurveFile) {
    formData.append("file", powerCurveFile, powerCurveFile.name);
    console.log(`[validateWindTrainingFiles] Appended power curve file: ${powerCurveFile.name}`);
  } else if (powerCurveModel === "upload_custom" && !powerCurveFile) {
    console.warn("[validateWindTrainingFiles] Custom power curve model selected, but file is missing!");
  }

  // Append other required form data
  formData.append("plan", plan);
  formData.append("type", powerCurveModel); // Using powerCurveModel for 'type'
  formData.append("formType", type); // Add the form type (train or standard)
  console.log(`[validateWindTrainingFiles] Appended plan: ${plan}`);
  console.log(`[validateWindTrainingFiles] Appended type (using powerCurveModel): ${powerCurveModel}`);
  console.log(`[validateWindTrainingFiles] Appended formType: ${type}`);

  // --- Add filenames as JSON string ---
  const filenamesData = {
    train: templateFile?.name || null,
    // Only include curve name if uploading custom model and file exists
    curve: (powerCurveModel === "upload_custom" && powerCurveFile)
             ? powerCurveFile.name
             : null
  };
  const filenamesJsonString = JSON.stringify(filenamesData);
  formData.append("filenamesJson", filenamesJsonString);
  console.log(`[validateWindTrainingFiles] Appended filenamesJson: ${filenamesJsonString}`);
  // --- End of added filenames JSON ---

  console.log("üöÄ Sending wind validation request with FormData entries:");
  for (const pair of formData.entries()) {
    // Log file names for File objects, otherwise log the value
    const valueToLog = pair[1] instanceof File ? `File: ${pair[1].name}` : pair[1];
    console.log(`   ${pair[0]}: ${valueToLog}`);
  }

  try {
    const response = await axiosInstance.post<FileValidationResult>(
      "/api/Forecast/wind/validatefile", // Ensure this path is correct
      formData,
      {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      }
    );
    console.log("‚úÖ Wind validation response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå API Error in validateWindTrainingFiles:", error);
    if (axios.isAxiosError(error)) {
      console.error("‚ùå Response data:", error.response?.data);
      console.error("‚ùå Response status:", error.response?.status);
    } else {
        console.error("‚ùå Non-Axios error:", error);
    }
    throw error; // Re-throw for React Query
  }
};

/**
 * Interface for JSON payload for wind training forecast submission.
 * Field names match expected backend parameters (using snake_case where appropriate).
 */
/**
 * Interface for the complete wind forecast request body that can be used by both
 * standard and training forecasts to ensure consistent API requests
 */
export interface WindRequestBody {
  latitude: number;
  longitude: number;
  hubheight: number; 
  filename: string; 
  train_data: string; 
  guid: string;
  aux: string;
  powerCurveModel: string; 
  capacity: number;
  // startDate?: string;
  // endDate?: string;
}

/**
 * Interface for JSON payload for wind training forecast submission.
 * Field names match expected backend parameters (using snake_case where appropriate).
 */
export interface WindJsonSubmitParams {
  latitude: number;
  longitude: number;
  hubheight: number; 
  filename: string; 
  train_data: string; 
  guid?: string; // Unique identifier for the request
  aux?: string; // Optional auxiliary information
  powerCurveModel: string; 
  capacity: number;
}

/**
 * Function to submit wind training forecast data via JSON for basic plan.
 * @param params The wind forecast parameters including validated file paths.
 * @returns Promise with submission response.
 */
export const submitWindBasicJson = async (
  params: WindJsonSubmitParams
): Promise<FileUploadResponse> => {
  try {
    console.log('üöÄ Submitting Wind Basic JSON:', params);
    const response = await axiosInstance.post<FileUploadResponse>(
      "/api/Forecast/wind/basic", // Target the new JSON endpoint
      params, // Send params directly as JSON
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    console.log('‚úÖ Wind Basic JSON submission successful:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå API Error in submitWindBasicJson:', error);
    if (axios.isAxiosError(error)) {
      console.error('‚ùå Response data:', error.response?.data);
      console.error('‚ùå Response status:', error.response?.status);
    }
    throw error;
  }
};

/**
 * Function to submit wind training forecast data via JSON for premium plan.
 * @param params The wind forecast parameters including validated file paths.
 * @returns Promise with submission response.
 */
export const submitWindPremiumJson = async (
  params: WindJsonSubmitParams
): Promise<FileUploadResponse> => {
  try {
    console.log('üöÄ Submitting Wind Premium JSON:', params);
    const response = await axiosInstance.post<FileUploadResponse>(
      "/api/Forecast/wind/premium", // Target the new JSON endpoint
      params, // Send params directly as JSON
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    console.log('‚úÖ Wind Premium JSON submission successful:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå API Error in submitWindPremiumJson:', error);
    if (axios.isAxiosError(error)) {
      console.error('‚ùå Response data:', error.response?.data);
      console.error('‚ùå Response status:', error.response?.status);
    }
    throw error;
  }
};

/**
 * Function to upload template file for wind forecast
 * @param file The template file to upload
 * @param latitude Latitude value
 * @param longitude Longitude value
 * @param elevation Elevation value
 * @returns Promise with upload response
 */
export const uploadForecastTemplate = async (
  file: File,
  latitude: number,
  longitude: number,
  elevation: number
): Promise<FileUploadResponse> => {
  try {
    const formData = new FormData();
    // Ensure values are valid numbers before converting to string for FormData
    const latStr = !isNaN(latitude) ? latitude.toString() : '';
    const lonStr = !isNaN(longitude) ? longitude.toString() : '';
    const eleStr = !isNaN(elevation) ? elevation.toString() : '';

    formData.append('file', file);
    formData.append('latitude', latStr);
    formData.append('longitude', lonStr);
    formData.append('elevation', eleStr);

    const response = await axiosInstance.post<FileUploadResponse>(
      '/api/Forecast/wind/basic_file',
      formData,
      {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      }
    );

    return response.data;
  } catch (error) {
    console.error('‚ùå API Error in uploadForecastTemplate:', error);
    if (axios.isAxiosError(error)) {
      console.error('‚ùå Response data:', error.response?.data);
      console.error('‚ùå Response status:', error.response?.status);
      console.error('‚ùå Response headers:', error.response?.headers);
    }
    throw error;
  }
};

/**
 * Function to submit standard wind forecast request with park specifications
 * @param params The parameters for the standard wind forecast
 * @returns Promise with forecast response
 */
export const submitStandardForecast = async (
  params: WindForecastParams | WindJsonSubmitParams
): Promise<FileUploadResponse> => {
  try {
    console.log('üöÄ Submitting standard wind forecast with params:', params);
    
    // Create the request body with all parameters including validation data
    // Note: Elevation is only for solar requests, not included for wind
    // Create a properly typed request body with all required fields
    const requestBody: WindRequestBody = {
      latitude: params.latitude,
      longitude: params.longitude,
      // Use hubheight from params if available, otherwise use hubHeight (camelCase to lowercase)
      // hubheight: 'hubheight' in params ? params.hubheight : params.hubHeight,
      // powerCurveModel: params.powerCurveModel,
      // capacity: params.capacity || 0,
      // // Always include these fields for consistency with TrainForecastForm
      // filename: 'filename' in params ? params.filename : '',
      // train_data: 'train_data' in params ? params.train_data : '',
      // Always use empty strings for guid and aux (not null)
      // Fixed code with null checks and default values
      hubheight: 'hubheight' in params && params.hubheight !== undefined ? params.hubheight : (params.hubheight ?? 0),
      powerCurveModel: params.powerCurveModel ?? '',
      capacity: params.capacity ?? 0,
      // Always include these fields for consistency with TrainForecastForm
      filename: 'filename' in params && params.filename !== undefined ? params.filename : '',
      train_data: 'train_data' in params && params.train_data !== undefined ? params.train_data : '',
      // Always use empty strings for guid and aux (not null)
      guid: params.guid || '',
      aux: params.aux || ''
    };
    
    // Add optional fields if they exist
    // if ('startDate' in params && params.startDate) {
    //   requestBody.startDate = params.startDate;
    // }
    
    // if ('endDate' in params && params.endDate) {
    //   requestBody.endDate = params.endDate;
    // }
    
    console.log('üì¶ Request body for standard wind forecast:', requestBody);
    
    const response = await axiosInstance.post<FileUploadResponse>(
      '/api/Forecast/wind/basic',
      requestBody,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    
    console.log('‚úÖ Standard wind forecast submission successful:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå API Error in submitStandardForecast:', error);
    if (axios.isAxiosError(error)) {
      console.error('‚ùå Response data:', error.response?.data);
      console.error('‚ùå Response status:', error.response?.status);
    }
    throw error;
  }
};

/**
 * Function to upload template file for annual wind forecast
 * @param file The template file to upload
 * @param latitude Latitude value
 * @param longitude Longitude value
 * @param elevation Elevation value
 * @returns Promise with upload response
 */
export const uploadAnnualForecastTemplate = async (
  file: File,
  latitude: number,
  longitude: number,
  elevation: number
): Promise<FileUploadResponse> => {
  try {
    const formData = new FormData();
    // Ensure values are valid numbers before converting to string for FormData
    const latStr = !isNaN(latitude) ? latitude.toString() : '';
    const lonStr = !isNaN(longitude) ? longitude.toString() : '';
    const eleStr = !isNaN(elevation) ? elevation.toString() : '';

    formData.append('file', file);
    formData.append('latitude', latStr);
    formData.append('longitude', lonStr);
    formData.append('elevation', eleStr);

    const response = await axiosInstance.post<FileUploadResponse>(
      '/api/Forecast/wind/annual_file',
      formData,
      {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      }
    );

    return response.data;
  } catch (error) {
    console.error('‚ùå API Error in uploadAnnualForecastTemplate:', error);
    if (axios.isAxiosError(error)) {
      console.error('‚ùå Response data:', error.response?.data);
      console.error('‚ùå Response status:', error.response?.status);
      console.error('‚ùå Response headers:', error.response?.headers);
    }
    throw error;
  }
};

/**
 * Function to submit standard annual wind forecast request with park specifications
 * @param params The parameters for the standard annual wind forecast
 * @returns Promise with forecast response
 */
export const submitStandardAnnualForecast = async (
  params: WindForecastParams | WindJsonSubmitParams
): Promise<FileUploadResponse> => {
  try {
    console.log('üöÄ Submitting standard annual wind forecast with params:', params);
    
    // Create the request body with all parameters including validation data
    // Note: Elevation is only for solar requests, not included for wind
    // Create a properly typed request body with all required fields
    const requestBody: WindRequestBody = {
      latitude: params.latitude,
      longitude: params.longitude,
      // Use hubheight from params if available, otherwise use hubHeight (camelCase to lowercase)
      // hubheight: 'hubheight' in params ? params.hubheight : params.hubHeight,
      // powerCurveModel: params.powerCurveModel,
      // capacity: params.capacity || 0,
      // // Always include these fields for consistency with TrainForecastForm
      // filename: 'filename' in params ? params.filename : '',
      // train_data: 'train_data' in params ? params.train_data : '',
      // Fixed code with null checks and default values
      hubheight: 'hubheight' in params && params.hubheight !== undefined ? params.hubheight : (params.hubheight ?? 0),
      powerCurveModel: params.powerCurveModel ?? '',
      capacity: params.capacity ?? 0,
      // Always include these fields for consistency with TrainForecastForm
      filename: 'filename' in params && params.filename !== undefined ? params.filename : '',
      train_data: 'train_data' in params && params.train_data !== undefined ? params.train_data : '',
      // Always use empty strings for guid and aux (not null)
      guid: params.guid || '',
      aux: params.aux || ''
    };
    
    // Add optional fields if they exist
    // if ('startDate' in params && params.startDate) {
    //   requestBody.startDate = params.startDate;
    // }
    
    // if ('endDate' in params && params.endDate) {
    //   requestBody.endDate = params.endDate;
    // }
    
    console.log('üì¶ Request body for standard annual wind forecast:', requestBody);
    
    const response = await axiosInstance.post<FileUploadResponse>(
      '/api/Forecast/wind/premium',
      requestBody,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    
    console.log('‚úÖ Standard annual wind forecast submission successful:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå API Error in submitStandardAnnualForecast:', error);
    if (axios.isAxiosError(error)) {
      console.error('‚ùå Response data:', error.response?.data);
      console.error('‚ùå Response status:', error.response?.status);
    }
    throw error;
  }
};

/**
 * Function to get wind forecast time series data
 * @returns Promise with wind forecast time series data
 */
export const getWindForecastTimeSeries = async (): Promise<WindForecastApiResponse> => {
  try {
    // For now, use mock data for visualization
    return mockWindApi.getWindForecastTimeSeries();
    
    // When ready to use real API, uncomment this:
    // const response = await axiosInstance.get<WindForecastApiResponse>(
    //   '/api/Forecast/wind/timeseries'
    // );
    // return response.data;
  } catch (error) {
    console.error('‚ùå API Error in getWindForecastTimeSeries:', error);
    throw error;
  }
};

/**
 * Function to get wind forecast prediction comparison data
 * @returns Promise with wind forecast prediction comparison data
 */
export const getWindForecastPredictionComparison = async (): Promise<WindForecastApiResponse> => {
  try {
    // For now, use mock data for visualization
    return mockWindApi.getWindForecastPredictionComparison();
    
    // When ready to use real API, uncomment this:
    // const response = await axiosInstance.get<WindForecastApiResponse>(
    //   '/api/Forecast/wind/prediction'
    // );
    // return response.data;
  } catch (error) {
    console.error('‚ùå API Error in getWindForecastPredictionComparison:', error);
    throw error;
  }
};

/**
 * Function to get wind forecast data for the about page
 * @returns Promise with wind forecast data
 */
export const getWindForecastAbout = async (): Promise<WindForecastApiResponse> => {
  try {
    // For now, use mock data for visualization
    return mockWindApi.getWindForecastAbout();
    
    // When ready to use real API, uncomment this:
    // const response = await axiosInstance.get<WindForecastApiResponse>(
    //   '/api/Forecast/wind/about'
    // );
    // return response.data;
  } catch (error) {
    console.error('‚ùå API Error in getWindForecastAbout:', error);
    throw error;
  }
};
