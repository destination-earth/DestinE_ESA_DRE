/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthIndexImport } from './routes/_auth.index'
import { Route as PublicLogoutImport } from './routes/_public.logout'
import { Route as PublicLoginImport } from './routes/_public.login'
import { Route as AuthWindImport } from './routes/_auth.wind'
import { Route as AuthSolarDemoWhatIfImport } from './routes/_auth.solarDemoWhatIf'
import { Route as AuthSolarDemoTestImport } from './routes/_auth.solarDemoTest'
import { Route as AuthSolarDemoImport } from './routes/_auth.solarDemo'
import { Route as AuthProfileImport } from './routes/_auth.profile'
import { Route as AuthPricingImport } from './routes/_auth.pricing'
import { Route as AuthHybridImport } from './routes/_auth.hybrid'
import { Route as AuthForecastImport } from './routes/_auth.forecast'
import { Route as AuthFaqImport } from './routes/_auth/faq'
import { Route as AuthDocumentationImport } from './routes/_auth.documentation'
import { Route as AuthAssessmentImport } from './routes/_auth.assessment'
import { Route as AuthArchiveImport } from './routes/_auth.archive'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const PublicLogoutRoute = PublicLogoutImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthWindRoute = AuthWindImport.update({
  path: '/wind',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSolarDemoWhatIfRoute = AuthSolarDemoWhatIfImport.update({
  path: '/solarDemoWhatIf',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSolarDemoTestRoute = AuthSolarDemoTestImport.update({
  path: '/solarDemoTest',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSolarDemoRoute = AuthSolarDemoImport.update({
  path: '/solarDemo',
  getParentRoute: () => AuthRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any)

const AuthPricingRoute = AuthPricingImport.update({
  path: '/pricing',
  getParentRoute: () => AuthRoute,
} as any)

const AuthHybridRoute = AuthHybridImport.update({
  path: '/hybrid',
  getParentRoute: () => AuthRoute,
} as any)

const AuthForecastRoute = AuthForecastImport.update({
  path: '/forecast',
  getParentRoute: () => AuthRoute,
} as any)

const AuthFaqRoute = AuthFaqImport.update({
  path: '/faq',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDocumentationRoute = AuthDocumentationImport.update({
  path: '/documentation',
  getParentRoute: () => AuthRoute,
} as any)

const AuthAssessmentRoute = AuthAssessmentImport.update({
  path: '/assessment',
  getParentRoute: () => AuthRoute,
} as any)

const AuthArchiveRoute = AuthArchiveImport.update({
  path: '/archive',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_auth/archive': {
      preLoaderRoute: typeof AuthArchiveImport
      parentRoute: typeof AuthImport
    }
    '/_auth/assessment': {
      preLoaderRoute: typeof AuthAssessmentImport
      parentRoute: typeof AuthImport
    }
    '/_auth/documentation': {
      preLoaderRoute: typeof AuthDocumentationImport
      parentRoute: typeof AuthImport
    }
    '/_auth/faq': {
      preLoaderRoute: typeof AuthFaqImport
      parentRoute: typeof AuthImport
    }
    '/_auth/forecast': {
      preLoaderRoute: typeof AuthForecastImport
      parentRoute: typeof AuthImport
    }
    '/_auth/hybrid': {
      preLoaderRoute: typeof AuthHybridImport
      parentRoute: typeof AuthImport
    }
    '/_auth/pricing': {
      preLoaderRoute: typeof AuthPricingImport
      parentRoute: typeof AuthImport
    }
    '/_auth/profile': {
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof AuthImport
    }
    '/_auth/solarDemo': {
      preLoaderRoute: typeof AuthSolarDemoImport
      parentRoute: typeof AuthImport
    }
    '/_auth/solarDemoTest': {
      preLoaderRoute: typeof AuthSolarDemoTestImport
      parentRoute: typeof AuthImport
    }
    '/_auth/solarDemoWhatIf': {
      preLoaderRoute: typeof AuthSolarDemoWhatIfImport
      parentRoute: typeof AuthImport
    }
    '/_auth/wind': {
      preLoaderRoute: typeof AuthWindImport
      parentRoute: typeof AuthImport
    }
    '/_public/login': {
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof rootRoute
    }
    '/_public/logout': {
      preLoaderRoute: typeof PublicLogoutImport
      parentRoute: typeof rootRoute
    }
    '/_auth/': {
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AuthRoute.addChildren([
    AuthArchiveRoute,
    AuthAssessmentRoute,
    AuthDocumentationRoute,
    AuthFaqRoute,
    AuthForecastRoute,
    AuthHybridRoute,
    AuthPricingRoute,
    AuthProfileRoute,
    AuthSolarDemoRoute,
    AuthSolarDemoTestRoute,
    AuthSolarDemoWhatIfRoute,
    AuthWindRoute,
    AuthIndexRoute,
  ]),
  PublicLoginRoute,
  PublicLogoutRoute,
])

/* prettier-ignore-end */
