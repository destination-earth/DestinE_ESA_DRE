// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApiData.Helpers;

#nullable disable

namespace DataServices.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApiData.Entities.CVSLinks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_timestamp");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("filepath");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("jobid");

                    b.HasKey("Id");

                    b.ToTable("csv_links", "data");
                });

            modelBuilder.Entity("WebApiData.Entities.DataFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("data_format", "masterdata");
                });

            modelBuilder.Entity("WebApiData.Entities.DemoData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassDeSerial")
                        .HasColumnType("text")
                        .HasColumnName("classdeserial");

                    b.Property<string>("DataType")
                        .HasColumnType("text")
                        .HasColumnName("datatype");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.HasKey("Id");

                    b.ToTable("demodata", "graphdata");
                });

            modelBuilder.Entity("WebApiData.Entities.DniGhi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Assessment")
                        .HasColumnType("text")
                        .HasColumnName("assessment");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_from");

                    b.Property<string>("DateKey")
                        .HasColumnType("text")
                        .HasColumnName("date_key");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_to");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    b.Property<string>("Month")
                        .HasColumnType("text")
                        .HasColumnName("month");

                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("dnighi", "graphdata");
                });

            modelBuilder.Entity("WebApiData.Entities.Endpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apikey")
                        .HasColumnType("text")
                        .HasColumnName("apikey");

                    b.Property<bool>("AskData")
                        .HasColumnType("boolean")
                        .HasColumnName("ask_data");

                    b.Property<string>("Aux")
                        .HasColumnType("text")
                        .HasColumnName("aux");

                    b.Property<string>("BreakPeriod")
                        .HasColumnType("text")
                        .HasColumnName("break_period");

                    b.Property<int>("DataFormatId")
                        .HasColumnType("integer")
                        .HasColumnName("data_format_id");

                    b.Property<string>("MeasuringSensors")
                        .HasColumnType("text")
                        .HasColumnName("measuring_sensors");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<string>("ResponseClass")
                        .HasColumnType("text")
                        .HasColumnName("response_class");

                    b.Property<string>("ResponseSchema")
                        .HasColumnType("text")
                        .HasColumnName("response_schema");

                    b.Property<int>("RetrievalMethodTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("retrieval_method_type_id");

                    b.Property<string>("Schedule")
                        .HasColumnType("text")
                        .HasColumnName("schedule");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("DataFormatId");

                    b.HasIndex("PlantId");

                    b.HasIndex("RetrievalMethodTypeId");

                    b.ToTable("endpoint", "masterdata");
                });

            modelBuilder.Entity("WebApiData.Entities.JobFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<int>("FileSize")
                        .HasColumnType("integer")
                        .HasColumnName("file_size");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<int>("JobResponseId")
                        .HasColumnType("integer")
                        .HasColumnName("job_response_id");

                    b.HasKey("Id");

                    b.HasIndex("JobResponseId");

                    b.ToTable("jobfiles", "data");
                });

            modelBuilder.Entity("WebApiData.Entities.JobsDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("text")
                        .HasColumnName("downloadUrl");

                    b.Property<string>("EnergySource")
                        .HasColumnType("text")
                        .HasColumnName("energySource");

                    b.Property<string>("ForType")
                        .HasColumnType("text")
                        .HasColumnName("forType");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool>("IsUivisible")
                        .HasColumnType("boolean")
                        .HasColumnName("isuivisible");

                    b.Property<string>("JobKey")
                        .HasColumnType("text")
                        .HasColumnName("jobKey");

                    b.Property<string>("KeyHandler")
                        .HasColumnType("text")
                        .HasColumnName("keyHandler");

                    b.Property<string>("Parameters")
                        .HasColumnType("text")
                        .HasColumnName("parameters");

                    b.Property<string>("Plan")
                        .HasColumnType("text")
                        .HasColumnName("plan");

                    b.Property<string>("Progress")
                        .HasColumnType("text")
                        .HasColumnName("progress");

                    b.Property<string>("RequestServer")
                        .HasColumnType("text")
                        .HasColumnName("requestserver");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer")
                        .HasColumnName("statuscode");

                    b.Property<string>("UploadedFile")
                        .HasColumnType("text")
                        .HasColumnName("file");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text")
                        .HasColumnName("userEmail");

                    b.HasKey("Id");

                    b.ToTable("jobs", "masterdata");
                });

            modelBuilder.Entity("WebApiData.Entities.JobsResponses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<string>("EnergySource")
                        .HasColumnType("text")
                        .HasColumnName("energySource");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    b.Property<string>("Payload")
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<string>("PayloadFixed")
                        .HasColumnType("text")
                        .HasColumnName("payloadfixed");

                    b.Property<string>("ResponseServer")
                        .HasColumnType("text")
                        .HasColumnName("responseserver");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("jobsresponses", "data");
                });

            modelBuilder.Entity("WebApiData.Entities.LiveMeasurements", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<int>("SensorId")
                        .HasColumnType("integer")
                        .HasColumnName("sensor_id");

                    b.Property<string>("KeyType")
                        .HasColumnType("text")
                        .HasColumnName("key_type ");

                    b.Property<DateTime>("PlatformTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paltform_time_stamp");

                    b.Property<DateTime>("DataTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_time_stamp");

                    b.Property<decimal>("SensorValue")
                        .HasColumnType("numeric")
                        .HasColumnName("sensor_value");

                    b.HasKey("PlantId", "SensorId", "KeyType", "PlatformTimeStamp", "DataTimeStamp");

                    b.ToTable("live_measurements", "data");
                });

            modelBuilder.Entity("WebApiData.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descriptor")
                        .HasColumnType("text")
                        .HasColumnName("descriptor");

                    b.Property<string>("FirstOwner")
                        .HasColumnType("text")
                        .HasColumnName("first_owner");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_type_id");

                    b.Property<int>("Radius")
                        .HasColumnType("integer")
                        .HasColumnName("radius");

                    b.HasKey("Id");

                    b.HasIndex("PlantTypeId");

                    b.ToTable("plant", "masterdata");
                });

            modelBuilder.Entity("WebApiData.Entities.PlantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("plant_type", "masterdata");
                });

            modelBuilder.Entity("WebApiData.Entities.Predictions", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<int>("SensorId")
                        .HasColumnType("integer")
                        .HasColumnName("sensor_id");

                    b.Property<DateTime>("DataTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_time_stamp ");

                    b.Property<decimal>("SensorValue")
                        .HasColumnType("numeric")
                        .HasColumnName("sensor_value");

                    b.HasKey("PlantId", "SensorId", "DataTimeStamp");

                    b.ToTable("predictions", "data");
                });

            modelBuilder.Entity("WebApiData.Entities.RetrievalLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date ");

                    b.Property<int>("EndpointId")
                        .HasColumnType("integer")
                        .HasColumnName("endpoint_id");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean")
                        .HasColumnName("is_success");

                    b.Property<int>("Records")
                        .HasColumnType("integer")
                        .HasColumnName("records");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date ");

                    b.HasKey("Id");

                    b.HasIndex("EndpointId");

                    b.ToTable("retrieval_log", "masterdata");
                });

            modelBuilder.Entity("WebApiData.Entities.RetrievalMethodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("retrieval_method_type", "masterdata");
                });

            modelBuilder.Entity("WebApiData.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descriptor")
                        .HasColumnType("text")
                        .HasColumnName("descriptor");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Unit")
                        .HasColumnType("text")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.ToTable("sensor", "masterdata");
                });

            modelBuilder.Entity("WebApiData.Entities.SolarEnergyPrediction", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<DateTime>("DataTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_time_stamp ");

                    b.Property<decimal>("Ambient_temperature")
                        .HasColumnType("numeric")
                        .HasColumnName("ambient_temperature");

                    b.Property<decimal>("Ghiwhm2")
                        .HasColumnType("numeric")
                        .HasColumnName("ghiwhm2");

                    b.Property<DateTime>("PlatformTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paltform_time_stamp ");

                    b.Property<decimal>("Power_kw")
                        .HasColumnType("numeric")
                        .HasColumnName("power_kw");

                    b.HasKey("PlantId", "DataTimeStamp");

                    b.ToTable("solar_energy_prediction", "data");
                });

            modelBuilder.Entity("WebApiData.Entities.SolarEnergyProduction", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<DateTime>("DataTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_time_stamp ");

                    b.Property<decimal>("Ambient_temperature")
                        .HasColumnType("numeric")
                        .HasColumnName("ambient_temperature");

                    b.Property<decimal>("Ghiwhm2")
                        .HasColumnType("numeric")
                        .HasColumnName("ghiwhm2");

                    b.Property<DateTime>("PlatformTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paltform_time_stamp ");

                    b.Property<decimal>("Power_kw")
                        .HasColumnType("numeric")
                        .HasColumnName("power_kw");

                    b.HasKey("PlantId", "DataTimeStamp");

                    b.ToTable("solar_energy_production", "data");
                });

            modelBuilder.Entity("WebApiData.Entities.UploadedData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_timestamp");

                    b.Property<string>("Aux")
                        .HasColumnType("text")
                        .HasColumnName("aux");

                    b.Property<string>("Datatype")
                        .HasColumnType("text")
                        .HasColumnName("datatype");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<string>("PlantKey")
                        .HasColumnType("text")
                        .HasColumnName("plant_key");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text")
                        .HasColumnName("user_email");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.Property<string>("ValueStr")
                        .HasColumnType("text")
                        .HasColumnName("value_string");

                    b.Property<DateTime>("ValueTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("value_timestamp");

                    b.Property<string>("ValueType")
                        .HasColumnType("text")
                        .HasColumnName("valueType");

                    b.HasKey("Id");

                    b.ToTable("uploadeddata", "data");
                });

            modelBuilder.Entity("WebApiData.Entities.WindDirectional", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Assessment")
                        .HasColumnType("text")
                        .HasColumnName("assessment");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_from");

                    b.Property<string>("DateKey")
                        .HasColumnType("text")
                        .HasColumnName("date_key");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_to");

                    b.Property<string>("Direction")
                        .HasColumnType("text")
                        .HasColumnName("direction");

                    b.Property<double>("Frequency")
                        .HasColumnType("double precision")
                        .HasColumnName("frequency");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    b.Property<double>("Mean")
                        .HasColumnType("double precision")
                        .HasColumnName("mean");

                    b.Property<double>("NineFive")
                        .HasColumnType("double precision")
                        .HasColumnName("nine_five");

                    b.Property<double>("NineNine")
                        .HasColumnType("double precision")
                        .HasColumnName("nine_nine");

                    b.Property<double>("NineSeven")
                        .HasColumnType("double precision")
                        .HasColumnName("nine_seven");

                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<double>("WeibulScale")
                        .HasColumnType("double precision")
                        .HasColumnName("weibul_scale");

                    b.Property<double>("WeibulShape")
                        .HasColumnType("double precision")
                        .HasColumnName("weibul_shape");

                    b.HasKey("Id");

                    b.ToTable("winddirectional", "graphdata");
                });

            modelBuilder.Entity("WebApiData.Entities.WindEnergyPrediction", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<DateTime>("DataTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_time_stamp ");

                    b.Property<decimal>("Direction_deg")
                        .HasColumnType("numeric")
                        .HasColumnName("direction_deg");

                    b.Property<DateTime>("PlatformTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paltform_time_stamp ");

                    b.Property<decimal>("Power_kw")
                        .HasColumnType("numeric")
                        .HasColumnName("power_kw");

                    b.Property<decimal>("Speed_ms")
                        .HasColumnType("numeric")
                        .HasColumnName("speed_ms");

                    b.HasKey("PlantId", "DataTimeStamp");

                    b.ToTable("wind_energy_prediction", "data");
                });

            modelBuilder.Entity("WebApiData.Entities.WindEnergyProduction", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<DateTime>("DataTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_time_stamp ");

                    b.Property<decimal>("Direction_deg")
                        .HasColumnType("numeric")
                        .HasColumnName("direction_deg");

                    b.Property<DateTime>("PlatformTimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paltform_time_stamp ");

                    b.Property<decimal>("Power_kw")
                        .HasColumnType("numeric")
                        .HasColumnName("power_kw");

                    b.Property<decimal>("Speed_ms")
                        .HasColumnType("numeric")
                        .HasColumnName("speed_ms");

                    b.HasKey("PlantId", "DataTimeStamp");

                    b.ToTable("wind_energy_production", "data");
                });

            modelBuilder.Entity("WebApiData.Entities.WindRose", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Assessment")
                        .HasColumnType("text")
                        .HasColumnName("assessment");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_from");

                    b.Property<string>("DateKey")
                        .HasColumnType("text")
                        .HasColumnName("date_key");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_to");

                    b.Property<string>("Direction")
                        .HasColumnType("text")
                        .HasColumnName("direction");

                    b.Property<double>("Fifteen")
                        .HasColumnType("double precision")
                        .HasColumnName("fifteen");

                    b.Property<double>("Five")
                        .HasColumnType("double precision")
                        .HasColumnName("five");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    b.Property<double>("Moretwenty")
                        .HasColumnType("double precision")
                        .HasColumnName("moretwenty");

                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("ten");

                    b.Property<double>("Twenty")
                        .HasColumnType("double precision")
                        .HasColumnName("twenty");

                    b.Property<double>("Zero")
                        .HasColumnType("double precision")
                        .HasColumnName("zero");

                    b.HasKey("Id");

                    b.ToTable("windrose", "graphdata");
                });

            modelBuilder.Entity("WebApiData.Entities.WindSpeedDist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Assessment")
                        .HasColumnType("text")
                        .HasColumnName("assessment");

                    b.Property<double>("CurveA")
                        .HasColumnType("double precision")
                        .HasColumnName("curvea");

                    b.Property<double>("CurveB")
                        .HasColumnType("double precision")
                        .HasColumnName("curveb");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_from");

                    b.Property<string>("DateKey")
                        .HasColumnType("text")
                        .HasColumnName("date_key");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_to");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("counts");

                    b.Property<double>("Xaxis")
                        .HasColumnType("double precision")
                        .HasColumnName("xaxis");

                    b.HasKey("Id");

                    b.ToTable("windspeeddist", "graphdata");
                });

            modelBuilder.Entity("WebApiData.Entities.Endpoint", b =>
                {
                    b.HasOne("WebApiData.Entities.DataFormat", "DataFormat")
                        .WithMany("Endpoint")
                        .HasForeignKey("DataFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiData.Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiData.Entities.RetrievalMethodType", "RetrievalMethodType")
                        .WithMany("Endpoint")
                        .HasForeignKey("RetrievalMethodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataFormat");

                    b.Navigation("Plant");

                    b.Navigation("RetrievalMethodType");
                });

            modelBuilder.Entity("WebApiData.Entities.JobFiles", b =>
                {
                    b.HasOne("WebApiData.Entities.JobsResponses", "JobsResponses")
                        .WithMany("Files")
                        .HasForeignKey("JobResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobsResponses");
                });

            modelBuilder.Entity("WebApiData.Entities.JobsResponses", b =>
                {
                    b.HasOne("WebApiData.Entities.JobsDb", "Job")
                        .WithMany("Responses")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("WebApiData.Entities.Plant", b =>
                {
                    b.HasOne("WebApiData.Entities.PlantType", "PlantType")
                        .WithMany("Plant")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlantType");
                });

            modelBuilder.Entity("WebApiData.Entities.Predictions", b =>
                {
                    b.HasOne("WebApiData.Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("WebApiData.Entities.RetrievalLog", b =>
                {
                    b.HasOne("WebApiData.Entities.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("WebApiData.Entities.SolarEnergyPrediction", b =>
                {
                    b.HasOne("WebApiData.Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("WebApiData.Entities.SolarEnergyProduction", b =>
                {
                    b.HasOne("WebApiData.Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("WebApiData.Entities.WindEnergyPrediction", b =>
                {
                    b.HasOne("WebApiData.Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("WebApiData.Entities.WindEnergyProduction", b =>
                {
                    b.HasOne("WebApiData.Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("WebApiData.Entities.DataFormat", b =>
                {
                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("WebApiData.Entities.JobsDb", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("WebApiData.Entities.JobsResponses", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("WebApiData.Entities.PlantType", b =>
                {
                    b.Navigation("Plant");
                });

            modelBuilder.Entity("WebApiData.Entities.RetrievalMethodType", b =>
                {
                    b.Navigation("Endpoint");
                });
#pragma warning restore 612, 618
        }
    }
}
